// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Accel.proto

#include "Accel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_time_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Time_time_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_vector3d_2eproto;
namespace uuv_gazebo_plugins_msgs {
namespace msgs {
class AccelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Accel> _instance;
} _Accel_default_instance_;
}  // namespace msgs
}  // namespace uuv_gazebo_plugins_msgs
static void InitDefaultsscc_info_Accel_Accel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::uuv_gazebo_plugins_msgs::msgs::_Accel_default_instance_;
    new (ptr) ::uuv_gazebo_plugins_msgs::msgs::Accel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::uuv_gazebo_plugins_msgs::msgs::Accel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Accel_Accel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Accel_Accel_2eproto}, {
      &scc_info_Vector3d_vector3d_2eproto.base,
      &scc_info_Time_time_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Accel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Accel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Accel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Accel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::uuv_gazebo_plugins_msgs::msgs::Accel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::uuv_gazebo_plugins_msgs::msgs::Accel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::uuv_gazebo_plugins_msgs::msgs::Accel, linear_),
  PROTOBUF_FIELD_OFFSET(::uuv_gazebo_plugins_msgs::msgs::Accel, angular_),
  PROTOBUF_FIELD_OFFSET(::uuv_gazebo_plugins_msgs::msgs::Accel, time_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::uuv_gazebo_plugins_msgs::msgs::Accel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::uuv_gazebo_plugins_msgs::msgs::_Accel_default_instance_),
};

const char descriptor_table_protodef_Accel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Accel.proto\022\034uuv_gazebo_plugins_msgs.m"
  "sgs\032\016vector3d.proto\032\ntime.proto\"w\n\005Accel"
  "\022%\n\006linear\030\001 \002(\0132\025.gazebo.msgs.Vector3d\022"
  "&\n\007angular\030\002 \002(\0132\025.gazebo.msgs.Vector3d\022"
  "\037\n\004time\030\003 \001(\0132\021.gazebo.msgs.Time"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Accel_2eproto_deps[2] = {
  &::descriptor_table_time_2eproto,
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Accel_2eproto_sccs[1] = {
  &scc_info_Accel_Accel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Accel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Accel_2eproto = {
  false, false, descriptor_table_protodef_Accel_2eproto, "Accel.proto", 192,
  &descriptor_table_Accel_2eproto_once, descriptor_table_Accel_2eproto_sccs, descriptor_table_Accel_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_Accel_2eproto::offsets,
  file_level_metadata_Accel_2eproto, 1, file_level_enum_descriptors_Accel_2eproto, file_level_service_descriptors_Accel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Accel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Accel_2eproto)), true);
namespace uuv_gazebo_plugins_msgs {
namespace msgs {

// ===================================================================

void Accel::InitAsDefaultInstance() {
  ::uuv_gazebo_plugins_msgs::msgs::_Accel_default_instance_._instance.get_mutable()->linear_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::uuv_gazebo_plugins_msgs::msgs::_Accel_default_instance_._instance.get_mutable()->angular_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
  ::uuv_gazebo_plugins_msgs::msgs::_Accel_default_instance_._instance.get_mutable()->time_ = const_cast< ::gazebo::msgs::Time*>(
      ::gazebo::msgs::Time::internal_default_instance());
}
class Accel::_Internal {
 public:
  using HasBits = decltype(std::declval<Accel>()._has_bits_);
  static const ::gazebo::msgs::Vector3d& linear(const Accel* msg);
  static void set_has_linear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::Vector3d& angular(const Accel* msg);
  static void set_has_angular(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::Time& time(const Accel* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::gazebo::msgs::Vector3d&
Accel::_Internal::linear(const Accel* msg) {
  return *msg->linear_;
}
const ::gazebo::msgs::Vector3d&
Accel::_Internal::angular(const Accel* msg) {
  return *msg->angular_;
}
const ::gazebo::msgs::Time&
Accel::_Internal::time(const Accel* msg) {
  return *msg->time_;
}
void Accel::clear_linear() {
  if (linear_ != nullptr) linear_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Accel::clear_angular() {
  if (angular_ != nullptr) angular_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Accel::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Accel::Accel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:uuv_gazebo_plugins_msgs.msgs.Accel)
}
Accel::Accel(const Accel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear()) {
    linear_ = new ::gazebo::msgs::Vector3d(*from.linear_);
  } else {
    linear_ = nullptr;
  }
  if (from._internal_has_angular()) {
    angular_ = new ::gazebo::msgs::Vector3d(*from.angular_);
  } else {
    angular_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new ::gazebo::msgs::Time(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:uuv_gazebo_plugins_msgs.msgs.Accel)
}

void Accel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Accel_Accel_2eproto.base);
  ::memset(&linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(time_));
}

Accel::~Accel() {
  // @@protoc_insertion_point(destructor:uuv_gazebo_plugins_msgs.msgs.Accel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Accel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete linear_;
  if (this != internal_default_instance()) delete angular_;
  if (this != internal_default_instance()) delete time_;
}

void Accel::ArenaDtor(void* object) {
  Accel* _this = reinterpret_cast< Accel* >(object);
  (void)_this;
}
void Accel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Accel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Accel& Accel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Accel_Accel_2eproto.base);
  return *internal_default_instance();
}


void Accel::Clear() {
// @@protoc_insertion_point(message_clear_start:uuv_gazebo_plugins_msgs.msgs.Accel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(linear_ != nullptr);
      linear_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(angular_ != nullptr);
      angular_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(time_ != nullptr);
      time_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Accel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .gazebo.msgs.Vector3d linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Vector3d angular = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Time time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Accel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uuv_gazebo_plugins_msgs.msgs.Accel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Vector3d linear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear(this), target, stream);
  }

  // required .gazebo.msgs.Vector3d angular = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular(this), target, stream);
  }

  // optional .gazebo.msgs.Time time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uuv_gazebo_plugins_msgs.msgs.Accel)
  return target;
}

size_t Accel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:uuv_gazebo_plugins_msgs.msgs.Accel)
  size_t total_size = 0;

  if (_internal_has_linear()) {
    // required .gazebo.msgs.Vector3d linear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_);
  }

  if (_internal_has_angular()) {
    // required .gazebo.msgs.Vector3d angular = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_);
  }

  return total_size;
}
size_t Accel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uuv_gazebo_plugins_msgs.msgs.Accel)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Vector3d linear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_);

    // required .gazebo.msgs.Vector3d angular = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .gazebo.msgs.Time time = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:uuv_gazebo_plugins_msgs.msgs.Accel)
  GOOGLE_DCHECK_NE(&from, this);
  const Accel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Accel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:uuv_gazebo_plugins_msgs.msgs.Accel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:uuv_gazebo_plugins_msgs.msgs.Accel)
    MergeFrom(*source);
  }
}

void Accel::MergeFrom(const Accel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:uuv_gazebo_plugins_msgs.msgs.Accel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_linear()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_linear());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_angular()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_angular());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_time()->::gazebo::msgs::Time::MergeFrom(from._internal_time());
    }
  }
}

void Accel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:uuv_gazebo_plugins_msgs.msgs.Accel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accel::CopyFrom(const Accel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uuv_gazebo_plugins_msgs.msgs.Accel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_linear()) {
    if (!linear_->IsInitialized()) return false;
  }
  if (_internal_has_angular()) {
    if (!angular_->IsInitialized()) return false;
  }
  if (_internal_has_time()) {
    if (!time_->IsInitialized()) return false;
  }
  return true;
}

void Accel::InternalSwap(Accel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Accel, time_)
      + sizeof(Accel::time_)
      - PROTOBUF_FIELD_OFFSET(Accel, linear_)>(
          reinterpret_cast<char*>(&linear_),
          reinterpret_cast<char*>(&other->linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Accel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace uuv_gazebo_plugins_msgs
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::uuv_gazebo_plugins_msgs::msgs::Accel* Arena::CreateMaybeMessage< ::uuv_gazebo_plugins_msgs::msgs::Accel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uuv_gazebo_plugins_msgs::msgs::Accel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
