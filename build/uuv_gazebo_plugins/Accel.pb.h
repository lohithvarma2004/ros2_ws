// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Accel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Accel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Accel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector3d.pb.h"
#include "time.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Accel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Accel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Accel_2eproto;
namespace uuv_gazebo_plugins_msgs {
namespace msgs {
class Accel;
class AccelDefaultTypeInternal;
extern AccelDefaultTypeInternal _Accel_default_instance_;
}  // namespace msgs
}  // namespace uuv_gazebo_plugins_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::uuv_gazebo_plugins_msgs::msgs::Accel* Arena::CreateMaybeMessage<::uuv_gazebo_plugins_msgs::msgs::Accel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace uuv_gazebo_plugins_msgs {
namespace msgs {

// ===================================================================

class Accel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uuv_gazebo_plugins_msgs.msgs.Accel) */ {
 public:
  inline Accel() : Accel(nullptr) {};
  virtual ~Accel();

  Accel(const Accel& from);
  Accel(Accel&& from) noexcept
    : Accel() {
    *this = ::std::move(from);
  }

  inline Accel& operator=(const Accel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accel& operator=(Accel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Accel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Accel* internal_default_instance() {
    return reinterpret_cast<const Accel*>(
               &_Accel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Accel& a, Accel& b) {
    a.Swap(&b);
  }
  inline void Swap(Accel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Accel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Accel* New() const final {
    return CreateMaybeMessage<Accel>(nullptr);
  }

  Accel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Accel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Accel& from);
  void MergeFrom(const Accel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Accel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uuv_gazebo_plugins_msgs.msgs.Accel";
  }
  protected:
  explicit Accel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Accel_2eproto);
    return ::descriptor_table_Accel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
    kTimeFieldNumber = 3,
  };
  // required .gazebo.msgs.Vector3d linear = 1;
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;
  public:
  void clear_linear();
  const ::gazebo::msgs::Vector3d& linear() const;
  ::gazebo::msgs::Vector3d* release_linear();
  ::gazebo::msgs::Vector3d* mutable_linear();
  void set_allocated_linear(::gazebo::msgs::Vector3d* linear);
  private:
  const ::gazebo::msgs::Vector3d& _internal_linear() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_linear();
  public:
  void unsafe_arena_set_allocated_linear(
      ::gazebo::msgs::Vector3d* linear);
  ::gazebo::msgs::Vector3d* unsafe_arena_release_linear();

  // required .gazebo.msgs.Vector3d angular = 2;
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  const ::gazebo::msgs::Vector3d& angular() const;
  ::gazebo::msgs::Vector3d* release_angular();
  ::gazebo::msgs::Vector3d* mutable_angular();
  void set_allocated_angular(::gazebo::msgs::Vector3d* angular);
  private:
  const ::gazebo::msgs::Vector3d& _internal_angular() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_angular();
  public:
  void unsafe_arena_set_allocated_angular(
      ::gazebo::msgs::Vector3d* angular);
  ::gazebo::msgs::Vector3d* unsafe_arena_release_angular();

  // optional .gazebo.msgs.Time time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::gazebo::msgs::Time& time() const;
  ::gazebo::msgs::Time* release_time();
  ::gazebo::msgs::Time* mutable_time();
  void set_allocated_time(::gazebo::msgs::Time* time);
  private:
  const ::gazebo::msgs::Time& _internal_time() const;
  ::gazebo::msgs::Time* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::gazebo::msgs::Time* time);
  ::gazebo::msgs::Time* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:uuv_gazebo_plugins_msgs.msgs.Accel)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Vector3d* linear_;
  ::gazebo::msgs::Vector3d* angular_;
  ::gazebo::msgs::Time* time_;
  friend struct ::TableStruct_Accel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Accel

// required .gazebo.msgs.Vector3d linear = 1;
inline bool Accel::_internal_has_linear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || linear_ != nullptr);
  return value;
}
inline bool Accel::has_linear() const {
  return _internal_has_linear();
}
inline const ::gazebo::msgs::Vector3d& Accel::_internal_linear() const {
  const ::gazebo::msgs::Vector3d* p = linear_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Accel::linear() const {
  // @@protoc_insertion_point(field_get:uuv_gazebo_plugins_msgs.msgs.Accel.linear)
  return _internal_linear();
}
inline void Accel::unsafe_arena_set_allocated_linear(
    ::gazebo::msgs::Vector3d* linear) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_);
  }
  linear_ = linear;
  if (linear) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uuv_gazebo_plugins_msgs.msgs.Accel.linear)
}
inline ::gazebo::msgs::Vector3d* Accel::release_linear() {
  auto temp = unsafe_arena_release_linear();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Vector3d* Accel::unsafe_arena_release_linear() {
  // @@protoc_insertion_point(field_release:uuv_gazebo_plugins_msgs.msgs.Accel.linear)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Vector3d* temp = linear_;
  linear_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Accel::_internal_mutable_linear() {
  _has_bits_[0] |= 0x00000001u;
  if (linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArena());
    linear_ = p;
  }
  return linear_;
}
inline ::gazebo::msgs::Vector3d* Accel::mutable_linear() {
  // @@protoc_insertion_point(field_mutable:uuv_gazebo_plugins_msgs.msgs.Accel.linear)
  return _internal_mutable_linear();
}
inline void Accel::set_allocated_linear(::gazebo::msgs::Vector3d* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_);
  }
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear)->GetArena();
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:uuv_gazebo_plugins_msgs.msgs.Accel.linear)
}

// required .gazebo.msgs.Vector3d angular = 2;
inline bool Accel::_internal_has_angular() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || angular_ != nullptr);
  return value;
}
inline bool Accel::has_angular() const {
  return _internal_has_angular();
}
inline const ::gazebo::msgs::Vector3d& Accel::_internal_angular() const {
  const ::gazebo::msgs::Vector3d* p = angular_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Accel::angular() const {
  // @@protoc_insertion_point(field_get:uuv_gazebo_plugins_msgs.msgs.Accel.angular)
  return _internal_angular();
}
inline void Accel::unsafe_arena_set_allocated_angular(
    ::gazebo::msgs::Vector3d* angular) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_);
  }
  angular_ = angular;
  if (angular) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uuv_gazebo_plugins_msgs.msgs.Accel.angular)
}
inline ::gazebo::msgs::Vector3d* Accel::release_angular() {
  auto temp = unsafe_arena_release_angular();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Vector3d* Accel::unsafe_arena_release_angular() {
  // @@protoc_insertion_point(field_release:uuv_gazebo_plugins_msgs.msgs.Accel.angular)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Vector3d* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Accel::_internal_mutable_angular() {
  _has_bits_[0] |= 0x00000002u;
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArena());
    angular_ = p;
  }
  return angular_;
}
inline ::gazebo::msgs::Vector3d* Accel::mutable_angular() {
  // @@protoc_insertion_point(field_mutable:uuv_gazebo_plugins_msgs.msgs.Accel.angular)
  return _internal_mutable_angular();
}
inline void Accel::set_allocated_angular(::gazebo::msgs::Vector3d* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_);
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular)->GetArena();
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:uuv_gazebo_plugins_msgs.msgs.Accel.angular)
}

// optional .gazebo.msgs.Time time = 3;
inline bool Accel::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || time_ != nullptr);
  return value;
}
inline bool Accel::has_time() const {
  return _internal_has_time();
}
inline const ::gazebo::msgs::Time& Accel::_internal_time() const {
  const ::gazebo::msgs::Time* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Time*>(
      &::gazebo::msgs::_Time_default_instance_);
}
inline const ::gazebo::msgs::Time& Accel::time() const {
  // @@protoc_insertion_point(field_get:uuv_gazebo_plugins_msgs.msgs.Accel.time)
  return _internal_time();
}
inline void Accel::unsafe_arena_set_allocated_time(
    ::gazebo::msgs::Time* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uuv_gazebo_plugins_msgs.msgs.Accel.time)
}
inline ::gazebo::msgs::Time* Accel::release_time() {
  auto temp = unsafe_arena_release_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Time* Accel::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:uuv_gazebo_plugins_msgs.msgs.Accel.time)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::Time* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Time* Accel::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000004u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Time>(GetArena());
    time_ = p;
  }
  return time_;
}
inline ::gazebo::msgs::Time* Accel::mutable_time() {
  // @@protoc_insertion_point(field_mutable:uuv_gazebo_plugins_msgs.msgs.Accel.time)
  return _internal_mutable_time();
}
inline void Accel::set_allocated_time(::gazebo::msgs::Time* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:uuv_gazebo_plugins_msgs.msgs.Accel.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace uuv_gazebo_plugins_msgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Accel_2eproto
